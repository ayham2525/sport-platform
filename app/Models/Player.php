<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Carbon;
use App\Models\Payment;
use App\Models\Attendance;

class Player extends Model
{
    use HasFactory;
    const MODEL_NAME = 'Player';

    const STATUS_ACTIVE  = 'active';
    const STATUS_EXPIRED = 'expired';

    protected $fillable = [
        'user_id',
        'academy_id',
        'branch_id',
        'nationality_id',
        'birth_date',
        'gender',
        'player_code',
        'guardian_name',
        'guardian_phone',
        'position',
        'level',
        'shirt_size',
        'shorts_size',
        'shoe_size',
        'medical_notes',
        'remarks',
        'sport_id',
        'previous_school',
        'previous_academy',
        'status'
    ];

    // Relationships
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function academy()
    {
        return $this->belongsTo(Academy::class);
    }

    public function branch()
    {
        return $this->belongsTo(Branch::class);
    }

    public function nationality()
    {
        return $this->belongsTo(Nationality::class);
    }
    public function sport()
    {
        return $this->belongsTo(Sport::class);
    }

    public function programs()
    {
        return $this->belongsToMany(Program::class, 'player_program');
    }

    public function classes()
    {
        return $this->belongsToMany(ClassModel::class, 'class_model_player');
    }

    public function payments()
    {
        return $this->hasMany(Payment::class);
    }

    // Total revenue generated by this program
    public function totalRevenue()
    {
        return $this->payments()->sum('paid_amount');
    }

    // Count of players currently enrolled
    public function enrolledPlayersCount()
    {
        return $this->players()->count();
    }

    public function items()
    {
        return $this->belongsToMany(Item::class, 'uniform_requests')
            ->withPivot('size', 'color', 'quantity')
            ->withTimestamps();
    }

    public function card()
    {
        return $this->hasOne(Card::class, 'user_id', 'user_id');
    }

    public function uniformRequests()
    {
        return $this->hasMany(UniformRequest::class);
    }

    public function scopeActive($q)
    {
        return $q->where('status', self::STATUS_ACTIVE);
    }
    public function scopeExpired($q)
    {
        return $q->where('status', self::STATUS_EXPIRED);
    }



    // ---------- Helpers ----------

    public function lastProgramPayment()
    {
        return Payment::where('player_id', $this->id)
            ->where('category', 'program')
            ->whereIn('status', ['paid','partial'])
            ->orderByDesc('end_date')
            ->orderByDesc('payment_date')
            ->first();
    }

    public function attendanceCountBetween(?Carbon $from, ?Carbon $to): int
    {
        if (!$from || !$to) return 0;

        return Attendance::whereBetween('scanned_at', [$from, $to])
            ->where(function ($q) {
                // Prefer player_id, but count legacy rows that only stored user_id
                $q->where('player_id', $this->id)
                  ->orWhere(function ($qq) {
                      $qq->whereNull('player_id')->where('user_id', $this->user_id);
                  });
            })
            ->count();
    }



// Latest program payment for this player (paid/partial)
public function latestProgramPayment(): ?Payment
{
    return Payment::with('program')
        ->where('player_id', $this->id)
        ->where('category', 'program')
        ->whereIn('status', ['paid','partial'])
        ->orderByDesc('payment_date')   // prefer real payment date
        ->orderByDesc('created_at')     // fallback
        ->first();
}

/**
 * Super-simple progress:
 *  - total = class_count from the latest program payment (fallback to program.class_count)
 *  - attended = ALL attendance scans for this player (optionally from payment->start_date if present)
 *  - remaining = max(total - attended, 0)
 * No reliance on end_date.
 */
public function latestProgramProgress(): array
{
    $payment = $this->latestProgramPayment();

    $programName = null;
    $total = 0;

    if ($payment) {
        $total = (int)($payment->class_count ?? optional($payment->program)->class_count ?? 0);
        $programName = optional($payment->program)->name_en
            ?? optional($payment->program)->name_ar
            ?? null;
    }

    if ($total === 0) {
        $prog = $this->programs()->latest('player_program.created_at')->first();
        if ($prog) {
            $total = (int)($prog->class_count ?? 0);
            $programName = $programName ?: ($prog->name_en ?? $prog->name_ar);
        }
    }

    // Count ALL attendance records for this player (ignore start/end dates)
    $attended = Attendance::query()
        ->where(function ($q) {
            $q->where('player_id', $this->id)
              ->orWhere(function ($qq) {
                  $qq->whereNull('player_id')->where('user_id', $this->user_id);
              });
        })
        ->count();

    $remaining = max($total - $attended, 0);

    return [
    'program_name'  => $programName,
    'total_classes' => $total,
    'attended'      => $attended,
    'remaining'     => $remaining,
    'payment_id'    => $payment?->id,
    'start'         => $payment && $payment->start_date
                        ? \Illuminate\Support\Carbon::parse($payment->start_date)->startOfDay()
                        : null,   // <-- add this so the UI always has the key
];
}


}
